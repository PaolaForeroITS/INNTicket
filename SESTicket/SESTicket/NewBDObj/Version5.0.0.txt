create table SERVICELINE
(SERVICELINEID INT IDENTITY(1,1) NOT NULL
,[NAME] NVARCHAR(300) NOT NULL
,ACTIVE VARCHAR(3) NOT NULL
)
go

ALTER TABLE SERVICELINE
ADD CONSTRAINT PK_SERVICELINE
PRIMARY KEY (SERVICELINEID)
go

ALTER TABLE TICKET
ADD SERVICELINEID INT DEFAULT 1 NOT NULL
go

alter table contract
alter column [SALESACCOUNT] nvarchar(30) null
go
alter table contract
alter column [SALESSUBACCOUNT] nvarchar(30) null
go
alter table contract
alter column [COSTOFGOODSACCOUNT] nvarchar(30) null
go
alter table contract
alter column [COSTOFGOODSSUBACCOUNT] nvarchar(30) null
go

alter table CONTRACT
ADD EXCHANGERATE FLOAT NULL
go


alter table CONTRACT
add ENABLEEXCHANGERATE varchar(3) DEFAULT 'YES' NOT NULL
go

alter table CONTRACT
add ENABLEDISCOUNT varchar(3) DEFAULT 'YES' NOT NULL
go

CREATE TABLE [dbo].[TICKETINVOICE](
	[TICKETINVOICEID] [int] IDENTITY(1,1) NOT NULL,
	[TICKETID] [nvarchar](50) NOT NULL,
	[LINETYPE] [nvarchar](50) NOT NULL,
	[INVOICESTATUS] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_TICKETINVOICE] PRIMARY KEY CLUSTERED 
(
	[TICKETINVOICEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];


CREATE TABLE [dbo].[TICKETINVOICELINE](
	[TICKETINVOICELINEID] [int] IDENTITY(1,1) NOT NULL,
	[TICKETINVOICEID] [int] NOT NULL,
	[TICKETID] [nvarchar](50) NOT NULL,
	INVOICEDATE DATE  NULL,
	[INVOICENUMBER] [nvarchar](100)  NULL,
	[INVOICEAMOUNT] [float]  NULL,
	[AX_GP_NUMBER] [nvarchar](50) NULL,
	[COMMENT] [nvarchar](max) NULL,
	[CREATEDUSER] [nvarchar](30) NOT NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[UPDATEDUSER] [nvarchar](30) NULL,
	[UPDATEDDATETIME] [datetime] NULL,
	[ACTIVE] [nvarchar](3) NOT NULL,
 CONSTRAINT [PK_[TICKETINVOICELINE] PRIMARY KEY CLUSTERED 
(
	[TICKETINVOICELINEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

ALTER TABLE [dbo].[TICKETINVOICELINE] ADD  DEFAULT ((0)) FOR [INVOICEAMOUNT]
GO

ALTER TABLE [dbo].[TICKETINVOICELINE] ADD  DEFAULT ('YES') FOR [ACTIVE]
GO

ALTER TABLE [dbo].[TICKETINVOICELINE]  WITH CHECK ADD  CONSTRAINT [FK_TICKETINVOICELINE_TICKETINVOICE] FOREIGN KEY([TICKETINVOICEID])
REFERENCES [dbo].[TICKETINVOICE] ([TICKETINVOICEID])
GO

ALTER TABLE [dbo].[TICKETINVOICELINE] CHECK CONSTRAINT [FK_TICKETINVOICELINE_TICKETINVOICE]
GO

alter table [dbo].[CONTRACT]
add SPLITAMOUNTMATSERV VARCHAR(3) DEFAULT 'NO' NOT NULL
go

alter table [dbo].[SITE]
add ALIAS nvarchar(5) null
go

ALTER TABLE CONTRACT
ADD [SERVICELINEID] INT NULL
go

ALTER TABLE CONTRACTPRICELIST
ADD PRICEBASE FLOAT DEFAULT 0 NOT NULL
,PRICEUTILITY FLOAT DEFAULT 0 NOT NULL
go

ALTER TABLE CONTRACT
ADD PCTUTILITYREP FLOAT DEFAULT 0  NOT NULL
go

CREATE TABLE [dbo].[TICKETSERVEVAL_HSEQ](
	[TICKETSERVEVALID] [nvarchar](255) NOT NULL,
	[TICKETID] [nvarchar](50) NOT NULL,
	[SERVICEDATE] [date] NOT NULL,
	[SERVDESCRIP] [nvarchar](max) NOT NULL,
	[EVAL_PERSONAL] [int] NOT NULL,
	[EVAL_EQUIPMENT] [int] NOT NULL,
	[EVAL_COMUNICATION] [int] NOT NULL,
	[EVAL_HSEQ_PERF] [int] NOT NULL,
	[EVAL_GENERALPERCEP] [int] NOT NULL,
	[OBS] [nvarchar](max) NULL,
	[ACTIVE] [nvarchar](3) NULL,
 CONSTRAINT [PK_TICKETSERVEVAL_HSEQ] PRIMARY KEY CLUSTERED 
(
	[TICKETSERVEVALID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

INSERT INTO VERSIONBASETABLE VALUES ('SERVICELINE',GETDATE(),2);
INSERT INTO SERVICELINE (NAME,ACTIVE) VALUES ('ITS','YES');
update CONTRACT SET EXCHANGERATE = 2800;
update CONTRACT SET SPLITAMOUNTMATSERV = 'NO';
update site set alias = 'VVC' WHERE SITEID = '01';
update site set alias = 'RBL' WHERE SITEID = '02';
UPDATE CONTRACT SET SERVICELINEID = 1;
UPDATE CONTRACT SET PCTUTILITYREP = 0;
update contractpricelist set
pricebase=0
,priceutility=0;

========================================================

DELETE FROM TICKETINVOICE WHERE TICKETID = '2.0073';

INSERT INTO TICKETINVOICE (TICKETID,LINETYPE,INVOICESTATUS)
SELECT TICKETID, 'Serv/Mat' AS LINETYPE,'Completed' as INVOICESTATUS
from ticket WHERE INVOICENUMBER IS NOT NULL
AND TICKETID NOT IN (SELECT TICKETID FROM TICKETINVOICE );

INSERT INTO [TICKETINVOICELINE] (TICKETID,TICKETINVOICEID,INVOICENUMBER,INVOICEDATE,COMMENT,CREATEDUSER,CREATEDDATETIME,ACTIVE,INVOICEAMOUNT)
selecT TICKETID,
(SELECT TICKETINVOICEID FROM TICKETINVOICE WHERE TICKETINVOICE.TICKETID = ticket.TICKETID) AS TICKETINVOICEID
,INVOICENUMBER,CAST(UPDATEDDATETIME AS DATE) AS INVOICEDATE,'Migrate from Ticket - Old field'
, 'FMELO' AS CREATEDUSER,'2018-01-15 00:00:00.000' AS CREATEDDATETIME, 'YES' AS ACTIVE
,(SELECT TICKETTOTAL FROM INVOICE_V WHERE INVOICE_V.TICKETID = TICKET.TICKETID) AS INVOICEAMOUNT
from ticket WHERE INVOICENUMBER IS NOT NULL AND INVOICENUMBER <> 'ANULADO'
AND TICKETSTATUS IN ('Closed','Open');




ALTER VIEW [dbo].[TICKETHEADERRPT_V] AS
WITH TICKETAMOUNT (
TICKETID, 
ITEMAMOUNTNODISC_COP, DISCVALUE_COP, ITEMAMOUNT_COP,
ITEMAMOUNTNODISC_USD, DISCVALUE_USD, ITEMAMOUNT_USD) AS
(
SELECT 
 TS.TICKETID
,sum(TS.ITEMAMOUNTNODISC   ) AS ITEMAMOUNTNODISC_COP
,sum(TS.DISCVALUE          ) AS DISCVALUE_COP
,sum(TS.ITEMAMOUNT         ) AS ITEMAMOUNT_COP
,sum(TS.ITEMAMOUNTNODISCUSD) AS ITEMAMOUNTNODISC_USD
,sum(TS.DISCVALUEUSD       ) AS DISCVALUE_USD
,sum(TS.ITEMAMOUNTUSD      ) AS ITEMAMOUNT_USD
FROM TICKETSALESITEM TS
GROUP BY TS.TICKETID
)
SELECT 
 T.TICKETID
,T.DATESERVICE
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.CREATEDUSER) AS CREATEDUSER
,T.CREATEDDATETIME
,T.CUSTOMERID AS CUSTOMERCODE
,C.NAME AS CUSTOMERNAME
,CT.CONTRACTNUMBER AS CONTRACT
,ST.DESCRIPTION AS SERVICETYPE
,T.WELLID
,T.RIG
,T.EXCHANGERATE
,T.CURRENCYID
,CASE T.CURRENCYID WHEN 'USD' THEN TA.ITEMAMOUNTNODISC_USD ELSE TA.ITEMAMOUNTNODISC_COP END AS ITEMAMOUNTNODISC
,CASE T.CURRENCYID WHEN 'USD' THEN TA.DISCVALUE_USD ELSE TA.DISCVALUE_COP END AS DISCVALUE
,CASE T.CURRENCYID WHEN 'USD' THEN TA.ITEMAMOUNT_USD ELSE TA.ITEMAMOUNT_COP END AS ITEMAMOUNT
,T.TIMEARRIVED
,T.TIMESTARTED
,T.TIMECOMPLETED
,T.CASINGSIZE
,T.CASINGWEIGHT
,T.CASINGGRADE
,T.TUBINGSIZE
,T.TUBINGWEIGHT
,T.TUBINGGRADE
,T.PRESSUREMAX
,T.DEPTHMAX
,T.JOBDESCRIPTION
,T.CUSTREPRES
,T.CUSTREPRESPOSITION
,T.CUSTREPRESASSIST
,(CONTREP.[NAME1] + ' ' +
CASE WHEN CONTREP.[NAME2] IS NULL OR CONTREP.[NAME2]='' THEN '' ELSE LEFT(CONTREP.[NAME2],1) + '. ' END +
CASE WHEN CONTREP.[SURNAME1] IS NULL OR CONTREP.[NAME2]='' THEN '' ELSE LEFT(CONTREP.[SURNAME1],1) + '. ' END +
CONTREP.[SURNAME2]) AS CONTRACTORREPRESENTATIVE
,T.CUSTCOMMENTS
,T.CONTRACTCOMMENTS
,T.TICKETSTATUS
,T.UPDATEDDATETIME
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.UPDATEDUSER) AS UPDATEDUSER
,T.CANCELDATETIME
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.CANCELUSER) AS CANCELUSER
,T.CANCELREASON
,STUFF((SELECT ' / ' + INV.LINETYPE + ': ' + INVOICESTATUS AS "text()" 
		FROM  TICKETINVOICE INV
		WHERE INV.TICKETID = T.TICKETID
     FOR XML PATH('')),1,3, '') AS INVOICESTATUS
,STUFF((SELECT ' / ' + 'Invoice: ' + ISNULL(LINE.INVOICENUMBER,'') + ' Amount: ' + CAST(LINE.INVOICEAMOUNT AS VARCHAR) 
		+ ' (' + INV.LINETYPE + ')' AS "text()" 
		FROM  TICKETINVOICE INV
		INNER JOIN TICKETINVOICELINE LINE ON (INV.TICKETINVOICEID = LINE.TICKETINVOICEID)
		WHERE INV.TICKETID = T.TICKETID AND LINE.ACTIVE = 'YES'
     FOR XML PATH('')),1,3, '') AS INVOICENNUMBER
,(SELECT  SUM(LINE.INVOICEAMOUNT) 
		FROM  TICKETINVOICE INV
		INNER JOIN TICKETINVOICELINE LINE ON (INV.TICKETINVOICEID = LINE.TICKETINVOICEID)
		WHERE INV.TICKETID = T.TICKETID AND LINE.ACTIVE = 'YES') AS INVOICEAMOUNT
FROM TICKET T  
   INNER JOIN CUSTOMER C  ON (T.CUSTOMERID = C.CUSTOMERID)
   INNER JOIN CONTRACT CT ON (T.CONTRACTID = CT.CONTRACTID)
   INNER JOIN SERVICETYPE ST ON (T.SERVICETYPEID = ST.SERVICETYPEID)
   INNER JOIN WORKER CONTREP ON (T.CONTRACTORREPRESENTATIVE = CONTREP.WORKERID)
   LEFT JOIN TICKETAMOUNT TA ON (TA.TICKETID = T.TICKETID)
   
   

GO


ALTER VIEW [dbo].[TICKETHEADERBYINVOICERPT_V] AS
WITH TICKETAMOUNT (
TICKETID, 
ITEMAMOUNTNODISC_COP, DISCVALUE_COP, ITEMAMOUNT_COP,
ITEMAMOUNTNODISC_USD, DISCVALUE_USD, ITEMAMOUNT_USD) AS
(
SELECT 
 TS.TICKETID
,sum(TS.ITEMAMOUNTNODISC   ) AS ITEMAMOUNTNODISC_COP
,sum(TS.DISCVALUE          ) AS DISCVALUE_COP
,sum(TS.ITEMAMOUNT         ) AS ITEMAMOUNT_COP
,sum(TS.ITEMAMOUNTNODISCUSD) AS ITEMAMOUNTNODISC_USD
,sum(TS.DISCVALUEUSD       ) AS DISCVALUE_USD
,sum(TS.ITEMAMOUNTUSD      ) AS ITEMAMOUNT_USD
FROM TICKETSALESITEM TS
GROUP BY TS.TICKETID
)
SELECT 
 T.TICKETID
,T.DATESERVICE
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.CREATEDUSER) AS CREATEDUSER
,T.CREATEDDATETIME
,T.CUSTOMERID AS CUSTOMERCODE
,C.NAME AS CUSTOMERNAME
,CT.CONTRACTNUMBER AS CONTRACT
,ST.DESCRIPTION AS SERVICETYPE
,T.WELLID
,T.RIG
,T.EXCHANGERATE
,T.CURRENCYID
,CASE T.CURRENCYID WHEN 'USD' THEN TA.ITEMAMOUNTNODISC_USD ELSE TA.ITEMAMOUNTNODISC_COP END AS ITEMAMOUNTNODISC
,CASE T.CURRENCYID WHEN 'USD' THEN TA.DISCVALUE_USD ELSE TA.DISCVALUE_COP END AS DISCVALUE
,CASE T.CURRENCYID WHEN 'USD' THEN TA.ITEMAMOUNT_USD ELSE TA.ITEMAMOUNT_COP END AS ITEMAMOUNT
,T.TIMEARRIVED
,T.TIMESTARTED
,T.TIMECOMPLETED
,T.CASINGSIZE
,T.CASINGWEIGHT
,T.CASINGGRADE
,T.TUBINGSIZE
,T.TUBINGWEIGHT
,T.TUBINGGRADE
,T.PRESSUREMAX
,T.DEPTHMAX
,T.JOBDESCRIPTION
,T.CUSTREPRES
,T.CUSTREPRESPOSITION
,T.CUSTREPRESASSIST
,(CONTREP.[NAME1] + ' ' +
CASE WHEN CONTREP.[NAME2] IS NULL OR CONTREP.[NAME2]='' THEN '' ELSE LEFT(CONTREP.[NAME2],1) + '. ' END +
CASE WHEN CONTREP.[SURNAME1] IS NULL OR CONTREP.[NAME2]='' THEN '' ELSE LEFT(CONTREP.[SURNAME1],1) + '. ' END +
CONTREP.[SURNAME2]) AS CONTRACTORREPRESENTATIVE
,T.CUSTCOMMENTS
,T.CONTRACTCOMMENTS
,T.TICKETSTATUS
,T.UPDATEDDATETIME
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.UPDATEDUSER) AS UPDATEDUSER
,T.CANCELDATETIME
,(SELECT U.NAME FROM [USER] U WHERE U.USERNAME = T.CANCELUSER) AS CANCELUSER
,T.CANCELREASON
,INV.LINETYPE AS INVOICETYPE
,INV.INVOICESTATUS 
,LINE.INVOICENUMBER
,LINE.INVOICEDATE  
,LINE.INVOICEAMOUNT 
,LINE.AX_GP_NUMBER 
,LINE.COMMENT AS INVOICECOMMENT
FROM TICKET T  
   INNER JOIN CUSTOMER C  ON (T.CUSTOMERID = C.CUSTOMERID)
   INNER JOIN CONTRACT CT ON (T.CONTRACTID = CT.CONTRACTID)
   INNER JOIN SERVICETYPE ST ON (T.SERVICETYPEID = ST.SERVICETYPEID)
   INNER JOIN WORKER CONTREP ON (T.CONTRACTORREPRESENTATIVE = CONTREP.WORKERID)
   LEFT JOIN TICKETINVOICE INV ON (T.TICKETID = INV.TICKETID)
   LEFT JOIN TICKETINVOICELINE LINE ON (INV.TICKETINVOICEID = LINE.TICKETINVOICEID)
   LEFT JOIN TICKETAMOUNT TA ON (TA.TICKETID = T.TICKETID)
   







GO


CREATE  PROCEDURE [dbo].[sp_TicketHeaderByInvoiceRpt]
    @ServiceDateBegin   datetime     = null
   ,@ServiceDateEnd     datetime     = null
   ,@TicketId	     varchar(50)  = null
   ,@CreatedBy		 varchar(max)  = null
   ,@TicketStatus    varchar(max) = null
AS
BEGIN
 
    ----------------------
    -- Tratando Parametros
    ----------------------
    set @ServiceDateBegin = cast(floor(cast(@ServiceDateBegin as float)) as datetime);
    set @ServiceDateEnd = cast(floor(cast(@ServiceDateEnd as float)) as datetime);
    set @TicketId = UPPER(replace(@TicketId,'*','%'));

	----------------------
    -- Execução
    ----------------------
    SELECT *
  FROM [TICKETHEADERBYINVOICERPT_V]
  where
		1 = 1
	and cast(floor(cast(DATESERVICE as float)) as datetime)  between @ServiceDateBegin and @ServiceDateEnd
	and (TICKETID = @TicketId or (@TicketId = '' or @TicketId is null) or TICKETID like @TicketId)
	and (CREATEDUSER in (select * from dbo.fnStringMultValues (@CreatedBy)) OR @CreatedBy is null or @CreatedBy='')
	and (TICKETSTATUS in (select * from dbo.fnStringMultValues (@TicketStatus)) OR @TicketStatus is null or @TicketStatus=''  )
	order by TICKETID asc

END








GO





